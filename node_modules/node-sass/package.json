{
  "name": "node-sass",
  "version": "3.0.0-pre",
  "libsass": "3.1.0",
  "description": "Wrapper around libsass",
  "license": "MIT",
  "homepage": "https://github.com/sass/node-sass",
  "repository": {
    "type": "git",
    "url": "https://github.com/sass/node-sass"
  },
  "author": {
    "name": "Andrew Nesbitt",
    "email": "andrewnez@gmail.com",
    "url": "http://andrew.github.com"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "lib/index.js",
  "bin": {
    "node-sass": "bin/node-sass"
  },
  "gypfile": true,
  "scripts": {
    "coverage": "node scripts/coverage.js",
    "install": "node scripts/install.js",
    "postinstall": "node scripts/build.js",
    "pretest": "jshint bin lib test",
    "test": "mocha test"
  },
  "files": [
    "bin",
    "binding.gyp",
    "lib",
    "scripts",
    "src"
  ],
  "keywords": [
    "css",
    "libsass",
    "preprocessor",
    "sass",
    "scss",
    "style"
  ],
  "dependencies": {
    "chalk": "^1.0.0",
    "gaze": "^0.5.1",
    "get-stdin": "^4.0.1",
    "meow": "^3.1.0",
    "mkdirp": "^0.5.0",
    "nan": "^1.7.0",
    "npmconf": "^2.1.1",
    "pangyp": "^2.1.0",
    "request": "^2.53.0",
    "sass-graph": "^1.0.3"
  },
  "devDependencies": {
    "coveralls": "^2.11.2",
    "cross-spawn": "^0.2.6",
    "jscoverage": "^0.5.9",
    "jshint": "^2.6.3",
    "mocha": "^2.2.1",
    "mocha-lcov-reporter": "^0.0.2"
  },
  "readme": "# node-sass\r\n\r\n<table>\r\n  <tr>\r\n    <td>\r\n      <img width=\"100%\" alt=\"Sass logo\" src=\"https://rawgit.com/sass/node-sass/master/media/logo.svg\" />\r\n    </td>\r\n    <td valign=\"bottom\" align=\"right\">\r\n      <a href=\"https://nodei.co/npm/node-sass/\">\r\n        <img width=\"100%\" src=\"https://nodei.co/npm/node-sass.png?downloads=true&downloadRank=true&stars=true\">\r\n      </a>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n[![Build Status](https://travis-ci.org/sass/node-sass.svg?branch=master&style=flat)](https://travis-ci.org/sass/node-sass)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/22mjbk59kvd55m9y/branch/master)](https://ci.appveyor.com/project/sass/node-sass/branch/master)\r\n[![npm version](https://badge.fury.io/js/node-sass.svg)](http://badge.fury.io/js/node-sass)\r\n[![Dependency Status](https://david-dm.org/sass/node-sass.svg?theme=shields.io)](https://david-dm.org/sass/node-sass)\r\n[![devDependency Status](https://david-dm.org/sass/node-sass/dev-status.svg?theme=shields.io)](https://david-dm.org/sass/node-sass#info=devDependencies)\r\n[![Coverage Status](https://coveralls.io/repos/sass/node-sass/badge.svg?branch=master)](https://coveralls.io/r/sass/node-sass?branch=master)\r\n[![Inline docs](http://inch-ci.org/github/sass/node-sass.svg?branch=master)](http://inch-ci.org/github/sass/node-sass)\r\n[![Gitter chat](http://img.shields.io/badge/gitter-sass/node--sass-brightgreen.svg)](https://gitter.im/sass/node-sass)\r\n\r\nNode-sass is a library that provides binding for Node.js to [libsass], the C version of the popular stylesheet preprocessor, Sass.\r\n\r\nIt allows you to natively compile .scss files to css at incredible speed and automatically via a connect middleware.\r\n\r\nFind it on npm: <https://npmjs.org/package/node-sass>\r\n\r\nFollow @nodesass on twitter for release updates: https://twitter.com/nodesass\r\n\r\n## Install\r\n\r\n```\r\nnpm install node-sass\r\n```\r\n\r\nSome users have reported issues installing on Ubuntu due to `node` being registered to another package. [Follow the official NodeJS docs](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager) to install NodeJS so that `#!/usr/bin/env node` correctly resolved.\r\n\r\nCompiling versions 0.9.4 and above on Windows machines requires [Visual Studio 2013 WD](http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-desktop). If you have multiple VS versions, use ```npm install``` with the ```--msvs_version=2013``` flag also use this flag when rebuilding the module with node-gyp or nw-gyp.\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar sass = require('node-sass');\r\nsass.render({\r\n  file: scss_filename,\r\n  [, options..]\r\n}, function(err, result) { /*...*/ });\r\n// OR\r\nvar result = sass.renderSync({\r\n  data: scss_content\r\n  [, options..]\r\n});\r\n```\r\n\r\n## Options\r\n### file\r\nType: `String | null`\r\nDefault: `null`\r\n**Special**: `file` or `data` must be specified\r\n\r\nPath to a file for [libsass] to render.\r\n\r\n### data\r\nType: `String | null`\r\nDefault: `null`\r\n**Special**: `file` or `data` must be specified\r\n\r\nA string to pass to [libsass] to render. It is recommended that you use `includePaths` in conjunction with this so that [libsass] can find files when using the `@import` directive.\r\n\r\n### importer (>= v2.0.0)\r\nType: `Function` signature `function(url, prev, done)`\r\nDefault: `undefined`\r\n\r\nFunction Parameters and Information:\r\n* `url (String)` - the path in import **as-is**, which [libsass] encountered\r\n* `prev (String)` - the previously resolved path\r\n* `done (Function)` - a callback function to invoke on async completion, takes an object literal containing\r\n  * `file (String)` - an alternate path for [libsass] to use **OR**\r\n  * `contents (String)` - the imported contents (for example, read from memory or the file system)\r\n\r\nHandles when [libsass] encounters the `@import` directive. A custom importer allows extension of the [libsass] engine in both a synchronous and asynchronous manner. In both cases, the goal is to either `return` or call `done()` with an object literal. Depending on the value of the object literal, one of two things will happen.\r\n\r\nWhen returning or calling `done()` with `{ file: \"String\" }`, the new file path will be assumed for the `@import`. It's recommended to be mindful of the value of `prev` in instances where relative path resolution may be required.\r\n\r\nWhen returning or calling `done()` with `{ contents: \"String\" }`, the string value will be used as if the file was read in through an external source.\r\n\r\n`this` refers to a contextual scope for the immediate run of `sass.render` or `sass.renderSync`\r\n\r\n### includePaths\r\nType: `Array<String>`\r\nDefault: `[]`\r\n\r\nAn array of paths that [libsass] can look in to attempt to resolve your `@import` declarations. When using `data`, it is recommended that you use this.\r\n\r\n### indentedSyntax\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`true` values enable [Sass Indented Syntax](http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html) for parsing the data string or file.\r\n\r\n### omitSourceMapUrl\r\nType: `Boolean`\r\nDefault: `false`\r\n**Special:** When using this, you should also specify `outFile` to avoid unexpected behavior.\r\n\r\n`true` values disable the inclusion of source map information in the output file.\r\n\r\n### outFile\r\nType: `String | null`\r\nDefault: `null`\r\n**Special:** Required when `sourceMap` is a truthy value\r\n\r\nSpecify the intended location of the output file. Strongly recommended when outputting source maps so that they can properly refer back to their intended files.\r\n\r\n### outputStyle\r\nType: `String`\r\nDefault: `nested`\r\nValues: `nested`, `compressed`\r\n\r\nDetermines the output format of the final CSS style. (`'expanded'` and `'compact'` are not currently supported by [libsass], but are planned in a future version.)\r\n\r\n### precision\r\nType: `Integer`\r\nDefault: `5`\r\n\r\nUsed to determine how many digits after the decimal will be allowed. For instance, if you had a decimal number of `1.23456789` and a precision of `5`, the result will be `1.23457` in the final CSS.\r\n\r\n### sourceComments\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`true` enables additional debugging information in the output file as CSS comments\r\n\r\n### sourceMap\r\nType: `Boolean | String | undefined`\r\nDefault: `undefined`\r\n**Special:** Setting the `sourceMap` option requires also setting the `outFile` option\r\n\r\nEnables the outputting of a source map during `render` and `renderSync`. When `sourceMap === true`, the value of `outFile` is used as the target output location for the source map. When `typeof sourceMap === \"String\"`, the value of `sourceMap` will be used as the writing location for the file.\r\n\r\n### sourceMapEmbed\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`true` embeds the source map as a data URI\r\n\r\n### sourceMapContents\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n`true` includes the `contents` in the source map information\r\n\r\n## `render` Callback (>= v3.0.0)\r\nnode-sass supports standard node style asynchronous callbacks with the signature of `function(err, result)`. In error conditions, the `error` argument is populated with the error object. In success conditions, the `result` object is populated with an object describing the result of the render call.\r\n\r\n### Error Object\r\n* `message` (String) - The error message.\r\n* `line` (Number) - The line number of error.\r\n* `column` (Number) - The column number of error.\r\n* `status` (Number) - The status code.\r\n* `file` (String) - The filename of error. In case `file` option was not set (in favour of `data`), this will reflect the value `stdin`.\r\n\r\n### Result Object\r\n* `css` (Buffer) - The compiled CSS. Write this to a file, or serve it out as needed.\r\n* `map` (Buffer) - The source map\r\n* `stats` (Object) - An object containing information about the compile. It contains the following keys:\r\n  * `entry` (String) - The path to the scss file, or `data` if the source was not a file\r\n  * `start` (Number) - Date.now() before the compilation\r\n  * `end` (Number) - Date.now() after the compilation\r\n  * `duration` (Number) - *end* - *start*\r\n  * `includedFiles` (Array) - Absolute paths to all related scss files in no particular order.\r\n\r\n### Examples\r\n\r\n```javascript\r\nvar sass = require('node-sass');\r\nsass.render({\r\n  file: '/path/to/myFile.scss',\r\n  data: 'body{background:blue; a{color:black;}}',\r\n  importer: function(url, prev, done) {\r\n    // url is the path in import as is, which libsass encountered.\r\n    // prev is the previously resolved path.\r\n    // done is an optional callback, either consume it or return value synchronously.\r\n    // this.options contains this options hash, this.callback contains the node-style callback\r\n    someAsyncFunction(url, prev, function(result){\r\n      done({\r\n        file: result.path, // only one of them is required, see section Sepcial Behaviours.\r\n        contents: result.data\r\n      });\r\n    });\r\n    // OR\r\n    var result = someSyncFunction(url, prev);\r\n    return {file: result.path, contents: result.data};\r\n  },\r\n  includePaths: [ 'lib/', 'mod/' ],\r\n  outputStyle: 'compressed'\r\n}, function(error, result) { // >= v3.0.0\r\n  if (error) {\r\n    console.log(error.status); // use \"code\" <= v3.0.0\r\n    console.log(error.column);\r\n    console.log(error.message);\r\n    console.log(error.line);\r\n  }\r\n  else {\r\n    console.log(result.css.toString());\r\n    console.log(result.stats);\r\n    console.log(result.map.toString()); // or console.log(JSON.stringify(result.map));\r\n  }\r\n});\r\n// OR\r\nvar result = sass.renderSync({\r\n  file: '/path/to/file.scss',\r\n  data: 'body{background:blue; a{color:black;}}',\r\n  outputStyle: 'compressed',\r\n  outFile: '/to/my/output.css',\r\n  sourceMap: true, // or an absolute or relative (to outFile) path\r\n  importer: function(url, prev, done) {\r\n    // url is the path in import as is, which libsass encountered.\r\n    // prev is the previously resolved path.\r\n    // done is an optional callback, either consume it or return value synchronously.\r\n    // this.options contains this options hash\r\n    someAsyncFunction(url, prev, function(result){\r\n      done({\r\n        file: result.path, // only one of them is required, see section Sepcial Behaviours.\r\n        contents: result.data\r\n      });\r\n    });\r\n    // OR\r\n    var result = someSyncFunction(url, prev);\r\n    return {file: result.path, contents: result.data};\r\n  },\r\n}));\r\n\r\nconsole.log(result.css);\r\nconsole.log(result.map);\r\nconsole.log(result.stats);\r\n```\r\n\r\n### Special behaviours\r\n\r\n* In the case that both `file` and `data` options are set, node-sass will give precedence to `data` and use `file` to calculate paths in sourcemaps.\r\n\r\n### Version information (>= v2.0.0)\r\n\r\nBoth `node-sass` and `libsass` version info is now present in `package.json` and is exposed via `info` method:\r\n\r\n```javascript\r\nvar sass = require('node-sass');\r\n\r\nconsole.log(sass.info);\r\n\r\n/*\r\n  it will output something like:\r\n\r\n  node-sass       2.0.1   (Wrapper)       [JavaScript]\r\n  libsass         3.1.0   (Sass Compiler) [C/C++]\r\n*/\r\n```\r\n\r\n## Integrations\r\n\r\nListing of community uses of node-sass in build tools and frameworks.\r\n\r\n### Brackets extension\r\n\r\n[@jasonsanjose](https://github.com/jasonsanjose) has created a [Brackets](http://brackets.io) extension based on node-sass: <https://github.com/jasonsanjose/brackets-sass>. When editing Sass files, the extension compiles changes on save. The extension also integrates with Live Preview to show Sass changes in the browser without saving or compiling.\r\n\r\n### Brunch plugin\r\n\r\n[Brunch](http://brunch.io)'s official sass plugin uses node-sass by default, and automatically falls back to ruby if use of Compass is detected: <https://github.com/brunch/sass-brunch>\r\n\r\n### Connect/Express middleware\r\n\r\nRecompile `.scss` files automatically for connect and express based http servers.\r\n\r\nThis functionality has been moved to [`node-sass-middleware`](https://github.com/sass/node-sass-middleware) in node-sass v1.0.0\r\n\r\n### DocPad Plugin\r\n\r\n[@jking90](https://github.com/jking90) wrote a [DocPad](http://docpad.org/) plugin that compiles `.scss` files using node-sass: <https://github.com/jking90/docpad-plugin-nodesass>\r\n\r\n### Duo.js extension\r\n\r\n[@stephenway](https://github.com/stephenway) has created an extension that transpiles Sass to CSS using node-sass with [duo.js](http://duojs.org/)\r\n<https://github.com/duojs/sass>\r\n\r\n### Grunt extension\r\n\r\n[@sindresorhus](https://github.com/sindresorhus/) has created a set of grunt tasks based on node-sass: <https://github.com/sindresorhus/grunt-sass>\r\n\r\n### Gulp extension\r\n\r\n[@dlmanning](https://github.com/dlmanning/) has created a gulp sass plugin based on node-sass: <https://github.com/dlmanning/gulp-sass>\r\n\r\n### Harp\r\n\r\n[@sintaxi](https://github.com/sintaxi)’s Harp web server implicitly compiles `.scss` files using node-sass: <https://github.com/sintaxi/harp>\r\n\r\n### Metalsmith plugin\r\n\r\n[@stevenschobert](https://github.com/stevenschobert/) has created a metalsmith plugin based on node-sass: <https://github.com/stevenschobert/metalsmith-sass>\r\n\r\n### Meteor plugin\r\n\r\n[@fourseven](https://github.com/fourseven) has created a meteor plugin based on node-sass: <https://github.com/fourseven/meteor-scss>\r\n\r\n### Mimosa module\r\n\r\n[@dbashford](https://github.com/dbashford) has created a Mimosa module for sass which includes node-sass: <https://github.com/dbashford/mimosa-sass>\r\n\r\n## Example App\r\n\r\nThere is also an example connect app here: <https://github.com/andrew/node-sass-example>\r\n\r\n## Rebuilding binaries\r\n\r\nNode-sass includes pre-compiled binaries for popular platforms, to add a binary for your platform follow these steps:\r\n\r\nCheck out the project:\r\n\r\n```bash\r\ngit clone --recursive https://github.com/sass/node-sass.git\r\ncd node-sass\r\ngit submodule update --init --recursive\r\nnpm install\r\nnpm install -g node-gyp\r\nnode-gyp rebuild  # to make debug release, use -d switch\r\n```\r\n\r\n## Command Line Interface\r\n\r\nThe interface for command-line usage is fairly simplistic at this stage, as seen in the following usage section.\r\n\r\nOutput will be saved with the same name as input SASS file into the current working directory if it's omitted.\r\n\r\n### Usage\r\n `node-sass [options] <input.scss> [<output.css>]`\r\n\r\n **Options:**\r\n\r\n```bash\r\n    -w, --watch                Watch a directory or file\r\n    -r, --recursive            Recursively watch directories or files\r\n    -o, --output               Output directory\r\n    -x, --omit-source-map-url  Omit source map URL comment from output\r\n    -i, --indented-syntax      Treat data from stdin as sass code (versus scss)\r\n    -v, --version              Prints version info\r\n    --output-style             CSS output style (nested|expanded|compact|compressed)\r\n    --source-comments          Include debug info in output\r\n    --source-map               Emit source map\r\n    --source-map-embed         Embed sourceMappingUrl as data URI\r\n    --source-map-contents      Embed include contents in map\r\n    --include-path             Path to look for imported files\r\n    --precision                The amount of precision allowed in decimal numbers\r\n    --importer                 Path to custom importer\r\n    --help                     Print usage info\r\n```\r\n\r\nNote `--importer` takes the (absolute or relative to pwd) path to a js file, which needs to have a default `module.exports` set to the importer function. See our test [fixtures](https://github.com/sass/node-sass/tree/974f93e76ddd08ea850e3e663cfe64bb6a059dd3/test/fixtures/extras) for example.\r\n\r\n## Post-install Build\r\n\r\nInstall runs only two Mocha tests to see if your machine can use the pre-built [libsass] which will save some time during install. If any tests fail it will build from source.\r\n\r\n## Maintainers\r\n\r\nThis module is brought to you and maintained by the following people:\r\n\r\n* Adeel Mujahid - Project Lead ([Github](https://github.com/am11) / [Twitter](https://twitter.com/adeelbm))\r\n* Andrew Nesbitt ([Github](https://github.com/andrew) / [Twitter](https://twitter.com/teabass))\r\n* Dean Mao ([Github](https://github.com/deanmao) / [Twitter](https://twitter.com/deanmao))\r\n* Brett Wilkins ([Github](https://github.com/bwilkins) / [Twitter](https://twitter.com/bjmaz))\r\n* Keith Cirkel ([Github](https://github.com/keithamus) / [Twitter](https://twitter.com/Keithamus))\r\n* Laurent Goderre ([Github](https://github.com/laurentgoderre) / [Twitter](https://twitter.com/laurentgoderre))\r\n* Nick Schonning ([Github](https://github.com/nschonni) / [Twitter](https://twitter.com/nschonni))\r\n* Adam Yeats ([Github](https://github.com/adamyeats) / [Twitter](https://twitter.com/adamyeats))\r\n\r\n## Contributors\r\n\r\nWe <3 our contributors! A special thanks to all those who have clocked in some dev time on this project, we really appreciate your hard work. You can find [a full list of those people here.](https://github.com/sass/node-sass/graphs/contributors)\r\n\r\n### Note on Patches/Pull Requests\r\n\r\n * Fork the project.\r\n * Make your feature addition or bug fix.\r\n * Add documentation if necessary.\r\n * Add tests for it. This is important so I don't break it in a future version unintentionally.\r\n * Send a pull request. Bonus points for topic branches.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2015 Andrew Nesbitt. See [LICENSE](https://github.com/sass/node-sass/blob/master/LICENSE) for details.\r\n\r\n[libsass]: https://github.com/hcatlin/libsass\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sass/node-sass/issues"
  },
  "_id": "node-sass@3.0.0-pre",
  "_from": "node-sass@"
}
